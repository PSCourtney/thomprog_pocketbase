@inject IStringLocalizer<LanguageSelector> L
@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop;
@using System.Globalization;

@using Thomprog.Models;
@using Thomprog.Components.ThemeManager;
@using Thomprog.Services;
@using Newtonsoft.Json.Linq;

<MudTooltip Text="@PreferenceService.themePreference.languageCode">
    <MudMenu Icon="@Icons.Material.Outlined.Translate" Color="Color.Inherit" Direction="Direction.Bottom" OffsetY="true"
        Dense="true">
        @foreach (var language in LocalizationConstants.SupportedLanguages)
        {
            if (language.Code  == CurrentLanguage)
            {
                <MudMenuItem style="background:var(--mud-palette-primary); color:white">@L[language.DisplayName]</MudMenuItem>
            }
            else
            {
                <MudMenuItem  OnClick="(()=> ChangeLanguageAsync(language.Code))">@L[language.DisplayName]</MudMenuItem>
            }
        }
    </MudMenu>
</MudTooltip>

@code {

    [Inject]
    public AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    [Inject]
    Blazored.LocalStorage.ILocalStorageService localStorage { get; set; }

    //private string? userId;
    //private int Id;

    public string? CurrentLanguage { get; set; } = "en-US";

    [Inject]
    public NavigationManager NavManager { get; set; }

    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //await PreferenceService.GetPreference();

        //var js = (IJSInProcessRuntime)JSRuntime;
        //string source = js.Invoke<string>("thomprog.get" );   
        //dynamic data = JObject.Parse(source);

        await PreferenceService.GetPreference();

        var preferences = await localStorage.GetItemAsync<ClientPreference> ("preferences");
        CurrentLanguage = preferences.languageCode;       

         if (CurrentLanguage  == null)
        {
             CurrentLanguage = "en-US";
        }       
        StateHasChanged();

    }

    private async Task ChangeLanguageAsync(string languageCode)
    {

        await PreferenceService.SetLanguage(languageCode);
        Snackbar.Add("Your Profile has been updated. Please Login again to Continue.", Severity.Success);

        ((PocketBaseAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsLoggedOut();

        Snackbar.Add("Logout successful");

        NavManager.NavigateTo($"/login", forceLoad: true);

        //NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
    }

    private List<Thomprog.Components.ThemeManager.ClientPreference>? _ClientPreferenceModel { get; set; }

    public record LanguageCode(string Code, string DisplayName, bool IsRTL = false);
    public static class LocalizationConstants
 {
    public static readonly LanguageCode[] SupportedLanguages =
    {
        new("en-US", "English"),
        new("fr-FR", "French"),       
        new("de-DE", "German"),
        new("nl-NL", "Dutch - Netherlands"),
        new("es-ES", "Spanish"),        
        new("it-IT", "Italian")

    };
}

}